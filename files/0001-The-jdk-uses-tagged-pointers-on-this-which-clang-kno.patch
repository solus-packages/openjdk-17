From 06604f491dafb2aaf95496b22158a81e1b0e27d4 Mon Sep 17 00:00:00 2001
From: Kurt Miller <bsdkurt@gmail.com>
Date: Fri, 4 Feb 2022 18:19:15 -0500
Subject: [PATCH 1/2] The jdk uses tagged pointers on 'this' which clang knows
 to be aligned and then optimizes away the tags.  Work around using 'this' as
 a tagged pointer by preventing inlining with clang 13.

---
 src/hotspot/cpu/aarch64/register_aarch64.hpp | 18 ++++++++++++++++++
 src/hotspot/cpu/x86/register_x86.hpp         | 12 ++++++++++++
 src/hotspot/cpu/zero/register_zero.hpp       |  6 ++++++
 src/hotspot/share/c1/c1_LIR.hpp              |  3 +++
 src/hotspot/share/code/vmreg.hpp             |  3 +++
 src/hotspot/share/oops/metadata.hpp          |  3 +++
 6 files changed, 45 insertions(+)

diff --git a/src/hotspot/cpu/aarch64/register_aarch64.hpp b/src/hotspot/cpu/aarch64/register_aarch64.hpp
index 5a152d62777..6c139d079e1 100644
--- a/src/hotspot/cpu/aarch64/register_aarch64.hpp
+++ b/src/hotspot/cpu/aarch64/register_aarch64.hpp
@@ -58,10 +58,16 @@ class RegisterImpl: public AbstractRegisterImpl {
   VMReg as_VMReg();
 
   // accessors
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding() const                         { assert(is_valid(), "invalid register"); return (intptr_t)this; }
   bool  is_valid() const                         { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }
   bool  has_byte_register() const                { return 0 <= (intptr_t)this && (intptr_t)this < number_of_byte_registers; }
   const char* name() const;
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding_nocheck() const                 { return (intptr_t)this; }
 };
 
@@ -152,7 +158,13 @@ class FloatRegisterImpl: public AbstractRegisterImpl {
   FloatRegister successor() const                          { return as_FloatRegister((encoding() + 1) % 32); }
 
   // accessors
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding() const                          { assert(is_valid(), "invalid register"); return (intptr_t)this; }
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding_nocheck() const                         { return (intptr_t)this; }
   bool  is_valid() const                          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }
   const char* name() const;
@@ -254,7 +266,13 @@ class PRegisterImpl: public AbstractRegisterImpl {
   PRegister successor() const     { return as_PRegister(encoding() + 1); }
 
   // accessors
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding() const          { assert(is_valid(), "invalid register"); return (intptr_t)this; }
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding_nocheck() const  { return (intptr_t)this; }
   bool  is_valid() const          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }
   const char* name() const;
diff --git a/src/hotspot/cpu/x86/register_x86.hpp b/src/hotspot/cpu/x86/register_x86.hpp
index b9ac2890240..513c1629c7c 100644
--- a/src/hotspot/cpu/x86/register_x86.hpp
+++ b/src/hotspot/cpu/x86/register_x86.hpp
@@ -63,6 +63,9 @@ class RegisterImpl: public AbstractRegisterImpl {
   inline VMReg as_VMReg();
 
   // accessors
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding() const                         { assert(is_valid(), "invalid register"); return (intptr_t)this; }
   bool  is_valid() const                         { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }
   bool  has_byte_register() const                { return 0 <= (intptr_t)this && (intptr_t)this < number_of_byte_registers; }
@@ -118,6 +121,9 @@ class FloatRegisterImpl: public AbstractRegisterImpl {
   FloatRegister successor() const                          { return as_FloatRegister(encoding() + 1); }
 
   // accessors
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding() const                          { assert(is_valid(), "invalid register"); return (intptr_t)this; }
   bool  is_valid() const                          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }
   const char* name() const;
@@ -157,6 +163,9 @@ class XMMRegisterImpl: public AbstractRegisterImpl {
   XMMRegister successor() const                          { return as_XMMRegister(encoding() + 1); }
 
   // accessors
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding() const                          { assert(is_valid(), "invalid register (%d)", (int)(intptr_t)this ); return (intptr_t)this; }
   bool  is_valid() const                          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }
   const char* name() const;
@@ -232,6 +241,9 @@ public:
   KRegister successor() const                          { return as_KRegister(encoding() + 1); }
 
   // accessors
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int   encoding() const                          { assert(is_valid(), "invalid register (%d)", (int)(intptr_t)this); return (intptr_t)this; }
   bool  is_valid() const                          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }
   const char* name() const;
diff --git a/src/hotspot/cpu/zero/register_zero.hpp b/src/hotspot/cpu/zero/register_zero.hpp
index 1b6f52879ef..9d9de1d7c94 100644
--- a/src/hotspot/cpu/zero/register_zero.hpp
+++ b/src/hotspot/cpu/zero/register_zero.hpp
@@ -57,6 +57,9 @@ class RegisterImpl : public AbstractRegisterImpl {
   }
 
   // accessors
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int encoding() const {
     assert(is_valid(), "invalid register");
     return (intptr_t)this;
@@ -92,6 +95,9 @@ class FloatRegisterImpl : public AbstractRegisterImpl {
   }
 
   // accessors
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int encoding() const {
     assert(is_valid(), "invalid register");
     return (intptr_t)this;
diff --git a/src/hotspot/share/c1/c1_LIR.hpp b/src/hotspot/share/c1/c1_LIR.hpp
index f22e486bb48..bfa97424849 100644
--- a/src/hotspot/share/c1/c1_LIR.hpp
+++ b/src/hotspot/share/c1/c1_LIR.hpp
@@ -207,6 +207,9 @@ class LIR_OprDesc: public CompilationResourceObj {
   friend class LIR_OprFact;
 
   // Conversion
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   intptr_t value() const                         { return (intptr_t) this; }
 
   bool check_value_mask(intptr_t mask, intptr_t masked_value) const {
diff --git a/src/hotspot/share/code/vmreg.hpp b/src/hotspot/share/code/vmreg.hpp
index 3ebd0c278f4..1638ed1beff 100644
--- a/src/hotspot/share/code/vmreg.hpp
+++ b/src/hotspot/share/code/vmreg.hpp
@@ -111,6 +111,9 @@ public:
   }
 
 
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   intptr_t value() const         {return (intptr_t) this; }
 
   void print_on(outputStream* st) const;
diff --git a/src/hotspot/share/oops/metadata.hpp b/src/hotspot/share/oops/metadata.hpp
index 7e6192b56e2..0c858c33291 100644
--- a/src/hotspot/share/oops/metadata.hpp
+++ b/src/hotspot/share/oops/metadata.hpp
@@ -37,6 +37,9 @@ class Metadata : public MetaspaceObj {
   NOT_PRODUCT(Metadata() : _valid(0) {})
   NOT_PRODUCT(bool is_valid() const { return _valid == 0; })
 
+#if defined(__clang_major__) && (__clang_major__ >= 13)
+  NOINLINE
+#endif
   int identity_hash()                { return (int)(uintptr_t)this; }
 
   virtual bool is_metadata()           const { return true; }
-- 
2.35.4

